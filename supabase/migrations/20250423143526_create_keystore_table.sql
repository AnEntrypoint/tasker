CREATE TABLE public.keystore (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    scope text NOT NULL,
    name text NOT NULL,
    value text NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT keystore_scope_name_key UNIQUE (scope, name)
);

-- Optional: Trigger to update 'updated_at' timestamp on changes
CREATE OR REPLACE FUNCTION handle_updated_at() 
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_keystore_update
BEFORE UPDATE ON public.keystore
FOR EACH ROW
EXECUTE FUNCTION handle_updated_at();

-- Enable Row Level Security (Good Practice)
ALTER TABLE public.keystore ENABLE ROW LEVEL SECURITY;

-- Create policies allowing service_role full access 
-- (since the function uses the service role key)
CREATE POLICY "Allow service_role full access" 
ON public.keystore
FOR ALL
USING (auth.role() = 'service_role')
WITH CHECK (auth.role() = 'service_role');
