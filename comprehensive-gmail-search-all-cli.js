#!/usr/bin/env node

/**
 * CLI for testing the comprehensive Gmail search that retrieves ALL users and ALL emails
 * This demonstrates the full suspend/resume mechanism with pagination
 */

const SUPABASE_URL = "http://127.0.0.1:8000";
const SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU";

// Parse command line arguments
const args = process.argv.slice(2);

// Show usage if help requested
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üîç Comprehensive Gmail Search ALL - CLI
=======================================

This enhanced version retrieves ALL users and ALL emails using pagination.

Usage: 
  node comprehensive-gmail-search-all-cli.js [options]

Options:
  --query, -q <query>       Gmail search query (default: "" - ALL emails)
  --pageSize <number>       Page size for API pagination (default: 100)
  --help, -h                Show this help message

Examples:
  # Get ALL emails for ALL users across ALL domains
  node comprehensive-gmail-search-all-cli.js

  # Search for specific content across ALL users
  node comprehensive-gmail-search-all-cli.js --query "subject:meeting"
  node comprehensive-gmail-search-all-cli.js --query "from:john@company.com"

  # Adjust page size for API calls
  node comprehensive-gmail-search-all-cli.js --pageSize 50

Features:
  ‚úÖ Discovers all Google Workspace domains
  ‚úÖ Lists ALL users for each domain (with pagination)
  ‚úÖ Searches Gmail for ALL emails for each user (with pagination)
  ‚úÖ Skips suspended users automatically
  ‚úÖ Provides detailed statistics and sample messages
  ‚úÖ Demonstrates VM suspend/resume with extensive API calls
`);
  process.exit(0);
}

// Better argument parsing
function parseArguments(args) {
  const options = {};
  
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    const nextArg = args[i + 1];
    
    if (arg === '--query' || arg === '-q') {
      if (nextArg && !nextArg.startsWith('--')) {
        options.query = nextArg;
        i++;
      }
    } else if (arg === '--pageSize') {
      if (nextArg && !nextArg.startsWith('--')) {
        options.pageSize = parseInt(nextArg);
        i++;
      }
    }
  }
  
  return options;
}

const options = parseArguments(args);

// Default values with validation
const input = {
  gmailSearchQuery: options.query || "",
  pageSize: Math.max(10, Math.min(options.pageSize || 100, 500))
};

console.log("üöÄ Comprehensive Gmail Search ALL - CLI");
console.log("======================================");
console.log(`üìß Search Query: "${input.gmailSearchQuery}" ${input.gmailSearchQuery === "" ? "(ALL emails)" : ""}`);
console.log(`üìÑ Page Size: ${input.pageSize}`);
console.log(`üåê Target: ALL users and ALL emails across ALL domains`);
console.log("");

async function runComprehensiveGmailSearchAll() {
  try {
    console.log("‚è≥ Waiting for Supabase services to start...");
    
    // Retry logic to wait for server startup
    const maxRetries = 30;
    let retries = 0;
    let serviceAvailable = false;
    
    while (retries < maxRetries && !serviceAvailable) {
      try {
        const healthCheck = await fetch(`${SUPABASE_URL}/functions/v1/tasks`, {
          method: 'HEAD',
          headers: {
            'Authorization': `Bearer ${SERVICE_ROLE_KEY}`
          }
        });
        
        if (healthCheck.ok || healthCheck.status === 405) {
          serviceAvailable = true;
          console.log("‚úÖ Supabase services are available");
        } else {
          throw new Error("Service not ready");
        }
      } catch (error) {
        retries++;
        if (retries < maxRetries) {
          process.stdout.write(`\r‚è≥ Waiting for services... (${retries}/${maxRetries}s)`);
          await new Promise(resolve => setTimeout(resolve, 1000));
        } else {
          console.error("");
          console.error("‚ùå Services not available after 30 seconds");
          console.error("Please ensure npm run gapi:serve is running");
          process.exit(1);
        }
      }
    }
    
    console.log("");
    console.log("‚è≥ Waiting for services to be fully ready...");
    await new Promise(resolve => setTimeout(resolve, 15000));
    
    console.log("üì§ Submitting comprehensive Gmail search ALL task...");
    
    const response = await fetch(`${SUPABASE_URL}/functions/v1/tasks/execute`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SERVICE_ROLE_KEY}`
      },
      body: JSON.stringify({
        taskName: 'comprehensive-gmail-search-all',
        input: input
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.taskRunId) {
      console.error("‚ùå Failed to get task run ID:", result);
      process.exit(1);
    }
    
    console.log(`‚úÖ Task submitted successfully!`);
    console.log(`üìã Task Run ID: ${result.taskRunId}`);
    console.log("");
    console.log("üîÑ Monitoring comprehensive search progress...");
    console.log("‚ö†Ô∏è  This will take longer as it retrieves ALL data:");
    console.log("  1. üè¢ Discover all Google Workspace domains");
    console.log("  2. üë• List ALL users for each domain (paginated)");  
    console.log("  3. üìß Search ALL Gmail messages for each user (paginated)");
    console.log("  4. üìä Aggregate all results with statistics");
    console.log("");
    console.log("üí° VM will suspend/resume many times during pagination");
    console.log("");

    // Enhanced monitoring with extended timeout for ALL data retrieval
    const startTime = Date.now();
    let lastStatus = '';
    let lastWaitingOn = '';
    let attempts = 0;
    const maxAttempts = 600; // 20 minutes max for extensive data retrieval

    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;
      
      try {
        const statusResponse = await fetch(`${SUPABASE_URL}/rest/v1/task_runs?id=eq.${result.taskRunId}&select=*`, {
          headers: {
            'Authorization': `Bearer ${SERVICE_ROLE_KEY}`,
            'apikey': SERVICE_ROLE_KEY
          }
        });
        
        if (!statusResponse.ok) {
          console.log(`‚ö†Ô∏è  Status check error: ${statusResponse.status}`);
          continue;
        }
        
        const taskData = await statusResponse.json();
        const task = taskData[0];
        
        if (!task) {
          console.log("‚ö†Ô∏è  Task not found - may still be initializing...");
          continue;
        }
        
        const elapsed = Math.round((Date.now() - startTime) / 1000);
        const statusChanged = task.status !== lastStatus;
        const waitingChanged = task.waiting_on_stack_run_id !== lastWaitingOn;
        
        if (statusChanged || waitingChanged) {
          lastStatus = task.status;
          lastWaitingOn = task.waiting_on_stack_run_id;
          
          const statusEmoji = {
            'queued': 'üì•',
            'processing': '‚öôÔ∏è',
            'suspended': '‚è∏Ô∏è',
            'completed': '‚úÖ',
            'failed': '‚ùå'
          }[task.status] || 'üîÑ';
          
          if (statusChanged) {
            console.log(`[${elapsed}s] ${statusEmoji} Status: ${task.status.toUpperCase()}`);
          }
          
          if (task.status === 'suspended' && task.waiting_on_stack_run_id) {
            console.log(`       üîó Waiting on: ${task.waiting_on_stack_run_id.substring(0, 12)}...`);
            console.log(`       üíæ VM state preserved - external API call in progress (pagination)`);
          }
        }
        
        if (task.status === 'completed') {
          console.log("");
          console.log("üéâ COMPREHENSIVE GMAIL SEARCH (ALL DATA) COMPLETED!");
          console.log("==================================================");
          
          if (task.result && task.result.summary) {
            const summary = task.result.summary;
            const stats = task.result.statistics || {};
            
            console.log(`üìä Final Results Summary:`);
            console.log(`   üè¢ Domains processed: ${summary.totalDomains}`);
            console.log(`   üë• Total users found: ${summary.totalUsers}`);
            console.log(`   üë§ Active users processed: ${summary.processedUsers}`);
            console.log(`   üìß Total emails found: ${summary.totalMessagesFound}`);
            console.log(`   üìä Average emails per user: ${stats.averageEmailsPerUser || 0}`);
            console.log(`   üîç Search query: "${summary.searchQuery}"`);
            
            // Show domain breakdown
            if (task.result.domainResults && task.result.domainResults.length > 0) {
              console.log("");
              console.log("üìã Results by Domain:");
              task.result.domainResults.forEach((domain, index) => {
                console.log(`   ${index + 1}. üè¢ ${domain.domain}:`);
                console.log(`      üë• Total users: ${domain.userCount}`);
                console.log(`      üìß Total emails: ${domain.totalMessages}`);
                
                // Show top 3 users by email count
                if (domain.users && domain.users.length > 0) {
                  const topUsers = domain.users
                    .sort((a, b) => b.messageCount - a.messageCount)
                    .slice(0, 3);
                  
                  console.log(`      üë§ Top users by email count:`);
                  topUsers.forEach((user, userIndex) => {
                    console.log(`         ${userIndex + 1}. ${user.email}: ${user.messageCount} emails`);
                  });
                }
              });
            }
            
            // Show sample messages
            if (task.result.sampleMessages && task.result.sampleMessages.length > 0) {
              console.log("");
              console.log("üì¨ Sample Messages (first 5):");
              task.result.sampleMessages.slice(0, 5).forEach((msg, index) => {
                console.log(`   ${index + 1}. From: ${msg.userEmail} (${msg.domain})`);
                console.log(`      Subject: ${msg.subject}`);
                console.log(`      Snippet: ${msg.snippet.substring(0, 100)}...`);
              });
            }
            
            // Show execution info
            if (task.result.executionInfo) {
              console.log("");
              console.log("‚ö° Execution Statistics:");
              console.log(`   ‚è±Ô∏è  Total time: ${elapsed}s`);
              console.log(`   üì° Estimated API calls: ${task.result.executionInfo.totalApiCalls}`);
              console.log(`   üíæ Suspensions/Resumes: Multiple (pagination)`);
            }
          } else {
            console.log("üìÑ Raw Result:", JSON.stringify(task.result, null, 2));
          }
          
          console.log("");
          console.log("‚ú® Technical Achievement:");
          console.log("   ‚úÖ Retrieved ALL users across ALL domains");
          console.log("   ‚úÖ Retrieved ALL emails for each active user");
          console.log("   ‚úÖ Handled pagination automatically");
          console.log("   ‚úÖ VM suspend/resume worked flawlessly");
          console.log("   ‚úÖ Complete data aggregation successful");
          console.log("");
          console.log("üöÄ The comprehensive Gmail search with FULL data retrieval is complete!");
          
          process.exit(0);
        } else if (task.status === 'failed') {
          console.log("");
          console.log("‚ùå TASK FAILED");
          console.log("==============");
          
          if (task.error) {
            console.log("üí• Error Details:");
            console.log(JSON.stringify(task.error, null, 2));
          }
          
          process.exit(1);
        }
        
        // Progress indicator for long-running operations
        if (attempts % 30 === 0 && task.status === 'suspended') {
          console.log(`       ‚è≥ Still processing after ${elapsed}s (normal for pagination-heavy operations)`);
        }
        
      } catch (error) {
        console.log(`‚ö†Ô∏è  Monitoring error: ${error.message}`);
      }
    }
    
    console.log("");
    console.log("‚è∞ MONITORING TIMEOUT REACHED");
    console.log("=============================");
    console.log("The task is still running but monitoring has reached the 20-minute limit.");
    console.log(`üìä Final status: ${lastStatus.toUpperCase()}`);
    console.log(`üîó Task ID: ${result.taskRunId}`);
    console.log("");
    console.log("üí° For large datasets, the task may still be running.");
    console.log("   Check the database directly for final results.");
    
    process.exit(1);
    
  } catch (error) {
    console.error("");
    console.error("üí• CRITICAL ERROR");
    console.error("================");
    console.error(error.message);
    
    if (error.stack) {
      console.error("");
      console.error("üîç Stack trace:");
      console.error(error.stack);
    }
    
    process.exit(1);
  }
}

// Run the comprehensive Gmail search for ALL data
runComprehensiveGmailSearchAll();