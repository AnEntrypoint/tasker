---
description: 
globs: 
alwaysApply: true
---
Everything in this project should be deno based

# Task Execution
- Tasker is a modular content generation system using QuickJS for secure, sandboxed task execution.
- The QuickJS executor in supabase/functions/quickjs/index.ts creates an isolated JavaScript environment, injects global objects like console and fetch, and executes task code with access to service proxies through the tools object.
- The QuickJS executor in supabase/functions/quickjs/index.ts was modified to properly handle promises by implementing a job processing loop that explicitly calls rt.executePendingJobs() to process pending jobs in the QuickJS runtime while waiting for async operations to complete.
- The QuickJS executor uses newAsyncContext() for Asyncify support, ctx.resolvePromise() for promise settlement, and async wrapper functions in VM proxies to properly handle promises in the QuickJS environment to properly handle promises.
- The QuickJS executor should be configured to properly handle promises by waiting for and resolving outstanding promises.
- The VM proxy generator in QuickJS returns the promise handle directly from __callHostTool__ without awaiting it, allowing the VM's await to operate on this handle via Asyncify.
- The VM proxy generator in QuickJS was optimized for OpenAI API calls by implementing aggressive parameter optimization (limiting max_tokens to 150, using gpt-3.5-turbo model, setting temperature to 0.3, adding brevity instructions) and using a more aggressive polling strategy with minimal intervals (no delay for first 50 attempts, then 2ms intervals).
- The system uses Supabase Edge Functions for task execution, with QuickJS providing a sandboxed JavaScript environment.
- Tasks are defined as JavaScript modules with a standard export pattern and JSDoc comments for documentation.
- Task functions should be defined as async functions to properly use await for asynchronous operations like API calls in the QuickJS environment.
- The database service uses the sdk-http-wrapper library to create a service proxy for Supabase, allowing tasks to query the database through the wrappedsupabase edge function.
- The wrappedsupabase service creates a Supabase client using the service role key and forwards API requests to it, supporting both generic SDK proxy requests and service-specific proxy requests.
- The wrappedopenai service retrieves the OpenAI API key from the keystore service, initializes the OpenAI client, and forwards method calls to the OpenAI API, handling authentication and error handling.
- The wrappedwebsearch service implements a web search using DuckDuckGo's HTML API, extracting titles, URLs, and snippets from search results and returning them in a structured format.
- The wrappedkeystore service manages API keys securely, providing methods to get, set, and list keys, with keys organized by namespace for different services, using the service role key for database access.
- The wrapped services use the executeMethodChain function from sdk-http-wrapper to process API requests, which extracts method chains from the request body and executes them on the service object.
- The sdk-http-wrapper library provides a client-server architecture for proxying SDK calls over HTTP, with a client that creates JavaScript proxies to record method chains and a server that executes those chains on the actual SDK instances.
- The client.js module creates dynamic proxies that intercept property access and method calls, recording them in a chain, and then sending the chain to the server for execution when a promise method is accessed.
- The buildProxy function in client.js creates a recursive proxy that captures property accesses as 'get' operations and method calls as 'call' operations, building a chain that represents the sequence of operations to be executed.
- The server.js module provides the executeMethodChain function that recursively resolves a chain of property accesses and method calls on an SDK instance, awaiting promises at each step to ensure proper asynchronous execution.
- The executeTask function fetches the task from the database, configures service proxies, prepares the runtime environment, and calls the QuickJS edge function with the task code, input, and configuration.
- The executeTask function includes a timeout mechanism for the QuickJS function call, with a default timeout of 90 seconds, and handles errors by formatting them with appropriate error messages and status codes.
- QuickJS documentation at https://bellard.org/quickjs/quickjs.html should be used as a guide for implementation.
- QuickJS documentation is available at https://bellard.org/quickjs/quickjs.pdf
- QuickJS requires explicit job processing via JS_ExecutePendingJob() to handle promises and async operations, with no implicit event loop in embedded environments.
- The SDK wrapper should be implemented like sdk-http-wrapper src/client.js or import it directly.
- QuickJS has an issue with Asyncify implementation in the Supabase/Deno environment where awaiting asyncified host functions (newAsyncifiedFunction) from within the VM causes the system to hang.

# QuikJS caveats
QuickJS — Caveats on Async and Passing/Returning Complex Objects
Here is a comprehensive summary of all known limitations, caveats, and details regarding asynchronous operations, information passing, and returning, based on your requirements and the documentation:

Async Functionality and Event Loop
Top-Level Await:

Supported only in ES modules (using .mjs or "use module") or when using std.evalScript(str, {async:true}).
Not available in standard scripts or synchronous eval.
Event/Job Loop:

No implicit event loop: If you embed QuickJS, you must call JS_ExecutePendingJob() (or equivalent) to process Promises, timers, async/await, etc.
The command-line REPL manages this automatically; embedding applications must do it manually.
No preemption/scheduling: Any synchronous (long-running/blocking) code will prevent async tasks (Promises, timers, etc.) from proceeding; the event loop only advances when JS execution returns to the event loop (i.e., after your script yields).
Timers:

Provided via os.setTimeout, os.clearTimeout, etc. (from the os module).
os.sleepAsync returns a Promise and is async, but does not create threads.
Timers/microtasks will not fire if the event loop is blocked (e.g., by infinite or long-running synchronous code).
No "unref"/detach: Timers keep the process alive until cleared explicitly.
No High-Resolution or Monotonic Time: Timers are not precise and may be imprecise depending on the platform.

File, Stream, and I/O Operations
All Standard Library I/O is Synchronous:

std/os modules provide only blocking/synchronous operations—no native non-blocking or async I/O.
Async/file/socket/network I/O must be manually implemented—e.g., using threads, polling, or integrating with your own OS event loop.
Evented I/O:

Each FD (file descriptor) supports only one setReadHandler/setWriteHandler at a time; reset with null to remove.
Only basic event integration provided, no advanced scheduling.
Passing Information & Return Values (Especially for Workers/Threads)
Worker Threads:

No nested workers (workers cannot spawn other workers).
No shared JS state—only SharedArrayBuffer is shared; all other JS data is serialized and copied (via structured clone) between threads.
Object identity is not preserved: If you send an object from main to worker, it is a separate copy in the worker.
postMessage() and Message Passing:

Only "structured-cloneable" data is supported:
CAN PASS/COPY: Plain JSON types (object/array/number/string/boolean/null), ArrayBuffer, SharedArrayBuffer.
CANNOT PASS: Functions, class instances with non-plain prototypes, Map, Set, DOM-like objects, open files/sockets/OS handles, or circular references.
Custom methods/prototypes are lost on clone.
Exceptions thrown in a worker are not passed to the parent.
onmessage handler must be set on the worker (otherwise may exit immediately).
Timers in one thread do not affect another thread.
Serialization/Deserialization:

Only JSON-compatible data and some basic binary types (ArrayBuffer, SharedArrayBuffer) are serialized.
All others become plain JSON objects/arrays; custom logic, prototypes, or methods are lost.
Resource handles (like file descriptors, sockets) cannot be cloned/serialized/transferred.
Circular References, Map, Set:

Not currently supported for passing to workers (not serializable). This may change in future QuickJS versions.
SharedArrayBuffer/Atomics:

Only SharedArrayBuffer may be shared; atomics work only with those (not with normal ArrayBuffer or objects).
Exception & Async Error Handling
Exception Boundaries:
Promise rejections/exceptions are local to the microtask/timer/callback in which they occur; they do not automatically propagate up to parent functions or event loop.
Garbage Collection (GC), Finalizers, and Resources
GC & Cyclic References:

Reference counting frees most objects automatically, with a secondary cycle-removal GC (may be delayed).
For deterministic or immediate cycle cleanup, call gc() manually.
No automatic cleanup of timers, event handlers, open files, or fds on GC or resource close: You must manage cleanup explicitly.
Finalizers:

Only C-level handlers (can't run JS code from a finalizer).
Finalizers are for C-level resources only.
Platform, Polyfills, and API Gaps
Many os features are POSIX-only; expect differences or missing APIs on Windows (e.g., TTY flags, file attributes).
No Intl/fetch/WebSocket/setImmediate/crypto built-in—must be provided by host or polyfilled in JS.
No built-in AbortController: Promises/timers cannot be cancelled except by userland logic.
Summary Table
Area	Limitation/Caveat
Top-level await	Only in modules (.mjs) or std.evalScript({async:true})
Event loop	Host must process jobs (JS_ExecutePendingJob) for async support when embedding
Timers	Not real-time; require os module; blocked by sync code; no "unref"/detach; must clear manually
File/Stream IO	Synchronous/blocking only; async must be wrapped/threaded by the user
Async I/O	No non-blocking IO, no async sockets built-in
Event handlers	Only one setReadHandler/setWriteHandler per FD; set to null to remove
Signal handling	Main thread only; one handler per signal
Workers/Threads	No nested workers; only SharedArrayBuffer is shared; rest is copied via structured clone
postMessage	Only JSON-style/ArrayBuffer/SharedArrayBuffer; methods/prototypes/handles not transferred
Serialization	Circular refs, Map, Set, custom prototypes not supported/lost; resource handles cannot pass
Object identity	Not preserved across worker boundaries
GC/finalizers	Cycles may persist; call gc() manually for cycle cleanup; finalizers (C only, can't run JS)
Platform	POSIX bias; features may not exist or differ on Windows
ECMAScript gaps	No Intl/fetch/WebSocket/setImmediate/crypto unless polyfilled
Exception boundary	Async errors local to microtimers; not propagated automatically to parent/event loop
Abort/Cancellation	No AbortController; must implement cancellation/user logic manually
Preemption/scheduler	None; long running sync code blocks all async/microtasks/timers
Implicit loop in C	Absent; must call event loop manually when embedding
Polyfills	APIs missing must be provided by hand/host/polyfill
message.txt


# Task Management
- The publish.ts script discovers task files in taskcode/endpoints/ directory, extracts JSDoc comments for descriptions, and upserts tasks into the task_functions table in Supabase.
- The publish.ts script supports command-line arguments: --all to publish all tasks, --specific [taskname] to publish specific tasks, and --list to display tasks in the database.
- The JSDoc parser extracts task documentation from code comments, parsing @param, @returns, and @throws tags to generate structured metadata for task parameters, return values, and error conditions.
- The schema generator converts parsed JSDoc information into structured schemas in different formats (OpenAPI, OpenAI function calling, JSON) for API documentation and client integration.
- The tasks edge function handles various routes: task execution (/tasks), schema generation (/schema), task listing (/list), task creation/update (/create), task deletion (/delete), and OpenAPI schema generation (/openapi).
- The tasks edge function first checks if a task exists in the TaskRegistry, and if so, executes it directly; otherwise, it fetches the task from the database and executes it using the executeTask function.
- The TaskRegistry class manages task registration, discovery, and execution, providing methods to register tasks, check if tasks exist, get task code and metadata, and execute tasks with input parameters and logs.

# Task Specifics
- The blog-generator task formats search results as context for OpenAI using a specific format: "Source X: [Title]\nURL: [URL]\nSummary: [Snippet]\n\n" for each result.
- The blog generator task has a maximum runtime of approximately 40 seconds.
- The module-diagnostic task checks the global scope, tools and tasks availability, require function, and module registry to diagnose module loading issues in the QuickJS environment.
- The blog-generator-cli.js is a simple command-line interface that calls the tasks edge function with the blog-generator task name and a topic from command-line arguments.
- The test-blog-generator.js provides a more detailed CLI with support for additional options (model, searchResults, temperature, maxTokens) and displays the generated blog content, sources, metadata, and execution logs.
- The test-module-diagnostic.js runs the module-diagnostic task to check the QuickJS environment, displaying information about global scope, tools and tasks availability, and module loading status.
- The response-formatter.ts module provides utilities for formatting task responses, including safeStringify for handling complex objects, formatTaskResult for standardizing response structure, and formatLogMessage for consistent log formatting.
- The module-generator.ts file returns empty module definitions for 'tools' and 'tasks', as the actual code is loaded directly by QuickJS rather than being generated.
- The test-live-openai.ts file demonstrates how to use the OpenAI service proxy, testing both chat completions and embeddings with the wrapped service.
- The test-live-websearch.ts file tests the web search service with search queries and concurrent requests, demonstrating how to use the websearch service proxy.
- The test-live-keystore.ts file tests the keystore service with namespace operations, key operations (set, get, list), and concurrent operations, using the service role key for authentication.
- The test-live-supabase.ts file tests the Supabase service with database operations (select, insert) and authentication operations (sign up, sign in), using the anon key for authentication.

# Database Interaction
- The database.ts module creates a service proxy for Supabase using the sdk-http-wrapper library.
- The fetchTaskFromDatabase function retrieves task code from the task_functions table, supporting lookup by either task ID or task name.
# Types
- The types/index.ts file defines interfaces for task information, execution results, schema properties, parsed JSDoc information, generated schemas, OpenAPI schemas, and OpenAI schemas.

# Ephemeral Calls
- Ephemeral calls should automatically delete themselves when finished.
- Keep only test-live* files and new, working tests that use the ephemeral call queueing system in the root directory.
- Use CLI tools for testing the ephemeral call queueing system to demonstrate functionality.
- The ephemeral-queue-process.ts CLI tool can be used to manually trigger processing of the next pending stack run.
- The gsuite-gmail-search-cli.js tool demonstrates real-world usage of the ephemeral call queueing system with Gmail search.
- Ephemeral call queueing uses the stack_runs table to store task execution state and process tasks asynchronously.
- Ephemeral calls use a trigger-based approach instead of polling to process queued items sequentially.
- Cron-based polling is used as a fallback for catastrophic failures in the ephemeral call queueing system.
- The QuickJS executor falls back to direct execution if the ephemeral call queueing system fails.
- The tasks.execute method in the QuickJS environment is overridden to use ephemeral call queueing.
- The ephemeral call queueing system supports both direct task execution and nested task execution.

# Development
- Use the REPL tool for testing.
- Avoid using mock implementations in the codebase.
- Use the same mechanism as @test-live-supabase.ts to access the database for the stack_runs table.
- Use triggers instead of polling for processing queued items sequentially, with cron-based polling as a fallback for catastrophic failures.

# Stack Runs Table & Processing
- The stack_runs table has columns: id, parent_run_id, module_name, method_name, args, status, created_at, updated_at, result, error.
- The stack_runs table should have indexes on the status and created_at fields for efficient querying of pending runs.
- The stack processor processes one stack run at a time and triggers the next one when complete.
- The stack processor uses the Supabase client to interact with the stack_runs table in the database.
- The VM state manager saves the state of a task execution in the stack_runs table with a unique stackRunId.
- The saveVMState function in the VM state manager accepts a stackRunId parameter to associate the VM state with a specific stack run.
- The stack processor extracts the task name and input from the args field when processing a tasks.execute method call.

# Google API Access
- The wrappedgapi function provides access to the Google API for Gmail and Admin SDK operations.

# Code Quality
- The user wants to remove redundant and orphaned code from the codebase.
- The user prefers code to be generic, modular, flexible and concise instead of having hard-coded overrides.
- The user prefers code to use real data instead of mock data anywhere in the codebase.

# Configuration
- The .env file contains the Supabase anon key needed for authentication.

# Database Interactions
- Use the wrapped Supabase edge function like in test-live-supabase.ts for database interactions, with examples in test-live-supabase.ts and implementation in supabase/functions/wrappedsupabase/index.ts.
- The wrappedsupabase service automatically uses the service role key for database operations.
- When a task is executed, it should be recorded in the task_runs table with status 'queued'.
- Task execution results should be stored in the task_runs table, and API calls should immediately return with a processing status rather than waiting for the complete result.
- Implemented an ephemeral execution model for tasks where tasks return immediately with a task run ID and execute in the background.
- The executeTask function in task-executor.ts now implements an ephemeral execution model that creates a task_runs record, starts background execution, and immediately returns a response with the task run ID.
- The __saveEphemeralCall__ function in QuickJS is responsible for saving nested calls to the stack_runs table with status 'pending', including the module name, method name, and arguments.
- When a nested call is encountered, the VM state should be saved, and a record should be inserted into the stack_runs table with the module name, method name, and arguments.
- The stack_runs table has a trigger that calls the stack-processor edge function when a new record with status 'pending' is inserted.
- The stack processor processes one stack run at a time and triggers the next one when complete.
- The saveVMState function in vm-state-manager.ts is responsible for inserting records into both stack_runs and task_runs tables.
- Stack runs and task runs tables work together to handle nested task execution, with stack_runs tracking VM state and parent-child relationships.
- Fix database issues by checking migrations.
- Use the mcp repl tool with deno to check database connection details and table contents.

# Execution
- The user wants code execution to have timeout capability.
- Use taskcode/publish.ts to publish tasks.
- Use 'npm run publish' to publish tasks in the project.
- The user prefers using Deno-based scripts instead of Node.js.
- The Tasker system uses QuickJS for secure, sandboxed task execution with ephemeral call queueing for nested tasks.
- QuickJS requires explicit job processing via JS_ExecutePendingJob() to handle promises and async operations, with no implicit event loop in embedded environments.
- The tasks edge function handles various routes: task execution (/tasks), schema generation (/schema), task listing (/list), task creation/update (/create), task deletion (/delete), and OpenAPI schema generation (/openapi).

# Testing
- The user prefers using the REPL execution tool for testing.
- Use the REPL tool to call tasks for testing.
- Use the REPL tool for fetching data instead of other methods.
- The user prefers using QuickJS for testing in the project.

